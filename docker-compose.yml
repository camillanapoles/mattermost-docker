

services:
  db:
    image: postgres:13
    container_name: mattermost-db
    environment:
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./volumes/db:/var/lib/postgresql/data
    networks:
      - mattermost-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db_user) -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  mattermost:
    image: mattermost/mattermost-team-edition:${MATTERMOST_VERSION}
    container_name: mattermost
    depends_on:
      - db
    environment:
      - MM_USERNAME_FILE=/run/secrets/db_user
      - MM_PASSWORD_FILE=/run/secrets/db_password
      - MM_DBNAME=${POSTGRES_DB}
      - MM_SQLSETTINGS_DATASOURCE=postgres://$$(cat /run/secrets/db_user):$$(cat /run/secrets/db_password)@db:5432/${POSTGRES_DB}?sslmode=disable&connect_timeout=10
      - MM_SERVICESETTINGS_SITEURL=https://$DOMAIN
      - MM_EMAILSETTINGS_SMTPSERVER=smtp.example.com
      - MM_EMAILSETTINGS_SMTPPORT=587
      - MM_EMAILSETTINGS_SMTPUSERNAME=mattermost@example.com
      - MM_EMAILSETTINGS_SMTPPASSWORD_FILE=/run/secrets/mattermost_smtp_password
      - MM_EMAILSETTINGS_ENABLESMTPAUTH=true
      - MM_EMAILSETTINGS_CONNECTIONSECURITY=TLS
      - MM_ELASTICSEARCHSETTINGS_ENABLEINDEXING=${ENABLE_ELASTICSEARCH}
      - MM_FOCALBOARDSETTINGS_ENABLE=${ENABLE_FOCALBOARD}
      - MM_INTEGRATIONSETTINGS_ENABLEINCOMINGWEBHOOKS=true
      - MM_INTEGRATIONSETTINGS_ENABLEOUTGOINGWEBHOOKS=true
    volumes:
      - ./config/mattermost:/mattermost/config
      - ./volumes/mattermost/data:/mattermost/data
      - ./volumes/mattermost/logs:/mattermost/logs
      - ./volumes/mattermost/plugins:/mattermost/plugins
      - ./volumes/mattermost/client-plugins:/mattermost/client/plugins
    networks:
      - mattermost-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8065/api/v4/system/ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  nginx:
    image: ${DOCKER_NGINX_IMAGE}
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./volumes/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - mattermost
    networks:
      - mattermost-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  certbot:
    image: ${CERTBOT_IMAGE}
    container_name: certbot
    volumes:
      - ./volumes/certbot/conf:/etc/letsencrypt
      - ./volumes/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${EMAIL} -d $DOMAIN --agree-tos
    depends_on:
      - nginx

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
    container_name: mattermost-elasticsearch
    environment:
      - discovery.type=single-node
    volumes:
      - ./volumes/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: mattermost-prometheus
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./volumes/prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:8.2.2
    container_name: mattermost-grafana
    volumes:
      - ./volumes/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD__FILE=/run/secrets/grafana_admin_password
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  gitlab:
    image: gitlab/gitlab-ce:latest
    container_name: mattermost-gitlab
    hostname: gitlab.$DOMAIN
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'https://gitlab.$DOMAIN'
        gitlab_rails['initial_root_password'] = File.read('/run/secrets/gitlab_root_password').strip
    ports:
      - "8443:443"
      - "8080:80"
      - "8022:22"
    volumes:
      - ./volumes/gitlab/config:/etc/gitlab
      - ./volumes/gitlab/logs:/var/log/gitlab
      - ./volumes/gitlab/data:/var/opt/gitlab
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  jenkins:
    image: jenkins/jenkins:lts
    container_name: mattermost-jenkins
    environment:
      - JENKINS_OPTS="--argumentsRealm.passwd.admin=$$(cat /run/secrets/jenkins_admin_password) --argumentsRealm.roles.admin=admin"
    ports:
      - "8090:8080"
    volumes:
      - ./volumes/jenkins_home:/var/jenkins_home
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  vault:
    image: vault:1.8.3
    container_name: mattermost-vault
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID_FILE=/run/secrets/vault_root_token
    volumes:
      - ./volumes/vault:/vault/file
    command: server -dev
    networks:
      - mattermost-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  mattermost-network:
    name: mattermost-network

secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  grafana_admin_password:
    file: ./secrets/grafana_admin_password.txt
  gitlab_root_password:
    file: ./secrets/gitlab_root_password.txt
  jenkins_admin_password:
    file: ./secrets/jenkins_admin_password.txt
  vault_root_token:
    file: ./secrets/vault_root_token.txt
  mattermost_smtp_password:
    file: ./secrets/mattermost_smtp_password.txt
